import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.svm import SVR
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import GridSearchCV
import matplotlib.pyplot as plt

# Load S\&P 500 data
ticker = '^GSPC'
data = yf.download(ticker, start='2010-01-01', end='2021-12-31')
data = data[['Close', 'Volume']]

# Data preprocessing
data.fillna(method='ffill', inplace=True)
scaler = MinMaxScaler()
data[['Close', 'Volume']] = scaler.fit_transform(data[['Close', 'Volume']])

# Feature Engineering
data['MA20'] = data['Close'].rolling(window=20).mean()
data['MA50'] = data['Close'].rolling(window=50).mean()
data['RSI'] = calculate_rsi(data['Close'])
data['BB_upper'] = data['MA20'] + 2 * data['Close'].rolling(window=20).std()
data['BB_lower'] = data['MA20'] - 2 * data['Close'].rolling(window=20).std()

for lag in range(1, 6):
    data[f'Lag_{lag}'] = data['Close'].shift(lag)

data.dropna(inplace=True)

# Train-test split
X = data.drop('Close', axis=1).values
y = data['Close'].values
train_size = int(len(X) * 0.8)
train_X, test_X = X[:train_size], X[train_size:]
train_y, test_y = y[:train_size], y[train_size:]

# Hyperparameter Tuning
param_grid = {'C': [1, 10, 100], 'gamma': [1e-3, 1e-4], 'kernel': ['rbf']}
svm = SVR()
grid_search = GridSearchCV(estimator=svm, param_grid=param_grid, cv=3, n_jobs=2, verbose=1)
grid_search.fit(train_X, train_y)

# Best Model
best_params = grid_search.best_params_
svm_best = SVR(**best_params)
svm_best.fit(train_X, train_y)

# Predictions
train_predict = svm_best.predict(train_X)
test_predict = svm_best.predict(test_X)

# Evaluation
train_mse = mean_squared_error(train_y, train_predict)
test_mse = mean_squared_error(test_y, test_predict)
print(f'Train MSE: {train_mse}')
print(f'Test MSE: {test_mse}')

# Inverse Scaling for Visualization
train_actual = scaler.inverse_transform(np.column_stack((train_predict, np.zeros(train_predict.shape))))
test_actual = scaler.inverse_transform(np.column_stack((test_predict, np.zeros(test_predict.shape))))
y_actual = scaler.inverse_transform(np.column_stack((y, np.zeros(y.shape))))

# Plot
plt.figure(figsize=(14, 8))
plt.plot(np.arange(len(y_actual)), y_actual[:, 0], label='Actual Prices')
plt.plot(np.arange(len(train_actual)), train_actual[:, 0], label='Train Predictions')
plt.plot(np.arange(len(train_actual), len(train_actual) + len(test_actual)), test_actual[:, 0], label='Test Predictions')
plt.legend()
plt.title('SVM Predictions of S\&P 500 with Hyperparameter Tuning')
plt.show()
