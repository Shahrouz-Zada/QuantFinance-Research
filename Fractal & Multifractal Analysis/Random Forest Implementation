import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Load S\&P 500 data from Yahoo Finance
ticker = '^GSPC'
data = yf.download(ticker, start='2010-01-01', end='2021-12-31')
data = data[['Close', 'Volume']]

# Feature Engineering
data['MA20'] = data['Close'].rolling(window=20).mean()
data['MA50'] = data['Close'].rolling(window=50).mean()
data['RSI'] = calculate_rsi(data['Close'])
data['BB_upper'] = data['MA20'] + 2 * data['Close'].rolling(window=20).std()
data['BB_lower'] = data['MA20'] - 2 * data['Close'].rolling(window=20).std()

for lag in range(1, 6):
    data[f'Lag_{lag}'] = data['Close'].shift(lag)

data.dropna(inplace=True)

# Split into training and testing sets
train_size = int(len(data) * 0.8)
train_data = data[:train_size]
test_data = data[train_size:]

X_train = train_data.drop(columns=['Close'])
y_train = train_data['Close']
X_test = test_data.drop(columns=['Close'])
y_test = test_data['Close']

# Train the Random Forest model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Make predictions
train_predict = rf_model.predict(X_train)
test_predict = rf_model.predict(X_test)

# Evaluate the model
train_mse = mean_squared_error(y_train, train_predict)
test_mse = mean_squared_error(y_test, test_predict)
print(f'Train MSE: {train_mse}')
print(f'Test MSE: {test_mse}')

# Plot the results
plt.figure(figsize=(14, 8))
plt.plot(data.index, data['Close'], label='Actual Prices')
plt.plot(train_data.index, train_predict, label='Train Predictions', linestyle='--')
plt.plot(test_data.index, test_predict, label='Test Predictions', linestyle='--')
plt.legend()
plt.title('Random Forest Predictions of S\&P 500')
plt.show()
