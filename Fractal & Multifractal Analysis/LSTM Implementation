import numpy as np
import pandas as pd
import yfinance as yf
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Load S\&P 500 data from Yahoo Finance
ticker = '^GSPC'
data = yf.download(ticker, start='2010-01-01', end='2021-12-31')

# Feature Engineering
data['MA20'] = data['Close'].rolling(window=20).mean()
data['MA50'] = data['Close'].rolling(window=50).mean()
data['RSI'] = calculate_rsi(data['Close'])
data['BB_upper'] = data['MA20'] + 2 * data['Close'].rolling(window=20).std()
data['BB_lower'] = data['MA20'] - 2 * data['Close'].rolling(window=20).std()

for lag in range(1, 6):
    data[f'Lag_{lag}'] = data['Close'].shift(lag)

data.dropna(inplace=True)

# Normalize features
features = ['Close', 'Volume', 'MA20', 'MA50', 'RSI', 'BB_upper', 'BB_lower'] + [f'Lag_{lag}' for lag in range(1, 6)]
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_features = scaler.fit_transform(data[features])

# Prepare dataset
def create_dataset(data, time_step=1):
    X, Y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step)])
        Y.append(data[i + time_step, 0])
    return np.array(X), np.array(Y)

time_step = 100
X, Y = create_dataset(scaled_features, time_step)

# Reshape for LSTM
X = X.reshape(X.shape[0], X.shape[1], X.shape[2])

# Train-Test Split
train_size = int(len(X) * 0.8)
train_X, test_X = X[:train_size], X[train_size:]
train_Y, test_Y = Y[:train_size], Y[train_size:]

# Build LSTM Model
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape=(time_step, X.shape[2])))
model.add(LSTM(50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(25))
model.add(Dense(1))

# Compile and Train Model
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(train_X, train_Y, batch_size=32, epochs=100)

# Predictions
train_predict = model.predict(train_X)
test_predict = model.predict(test_X)

# Inverse Scaling
scaler_close = MinMaxScaler()
scaler_close.fit(data[['Close']])
train_predict = scaler_close.inverse_transform(train_predict)
test_predict = scaler_close.inverse_transform(test_predict)
